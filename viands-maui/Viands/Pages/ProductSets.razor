@page "/productsets"

@using System.Diagnostics;
@using Viands.Data.ViewModels;
@using Viands.Support;
@using Viands.Data;
@inject IJSRuntime JS
@inject DialogService DialogService
@implements IDisposable

<div class="lists_container @EditModeClass">
    @if (ProductSetsList.Count > 0)
    {
        @foreach (var list in ProductSetsList)
        {
            <div class="lists_item @(lastSelected == list.Id ? "last_selected" : null)" @ref="ListElements[list.Order]">
                <div class="edit_tools_left">
                    <span class="tool_item" @onclick=@(() => AddProductSet(list.Id)) title="Edit list item">
                        <Blazicon Svg="MdiIcon.CircleEditOutline" class="edit_item" />
                    </span>
                </div>
                <div id="lin_@list.Id" class="list_name" @onclick="@(() => ProductSetItemClicked(list.Id))">
                    <label class="list_name_label">@list.Name</label>
                    <label class="list_desc_label">@list.Description</label>
                </div>
                <div class="edit_tools_right">
                    <span class="tool_item delete_section">
                        <span class="delete_item">
                            <Blazicon 
                                Svg="MdiIcon.DeleteForever"
                                class="delete_confirm_button"
                                title="Delete List"
                                @onclick=@(() => DeleteProductSet(ListElements[list.Order], list.Id, list.Name)) 
                            />
                        </span>
                    </span>
                </div>
            </div>
        }
    }
    else
    {
        <div class="empty_list_message">There are no sets yet.</div>
        <div class="empty_list_message">Tap the <Blazicon Svg=MdiIcon.FormatListGroupPlus /> button to get started.</div>
    }
    <div id="list_spacer" style="height:200px"></div>
</div>



@code
{
    private int lastSelected = -1;
    private bool jsModLoaded = false;
    private IJSObjectReference ProductSetsJS { get; set; }
    private List<VList> ProductSetsList = new List<VList>();
    private string EditModeClass => DisplayUtils.InListEditMode ? "edit_mode" : null;
    private Dictionary<int, ElementReference> ListElements = new Dictionary<int, ElementReference>();

    private string SelectFade(int id)
    {
        if (id == lastSelected)
        {
            return "last_selected";
        }
        return null;
    }

    private void HandleEvent(GlobalCallbacks.CBKeys key, dynamic args)
    {
        switch (key)
        {
            case GlobalCallbacks.CBKeys.RefreshLists:
                RefreshLists();
                break;
            case GlobalCallbacks.CBKeys.RefreshState:
                StateHasChanged();
                break;
            case GlobalCallbacks.CBKeys.AddProductSet:
                AddProductSet((int)args);
                break;
            case GlobalCallbacks.CBKeys.ViewProductSetItems:
                ViewProductSetItems((int)args);
                break;
            case GlobalCallbacks.CBKeys.EditListModeToggled:
                NavTools.RunToolSetFor(DisplayUtils.InListEditMode ? NavTools.ToolSetTypes.EditProductSets : NavTools.ToolSetTypes.ProductSets);
                if (DisplayUtils.InListEditMode)
                    NavTools.HighlightTool(NavTools.ToolTypes.FinishEditLists);
                break;
            case GlobalCallbacks.CBKeys.AddProductSetItem:
                
                break;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        GlobalCallbacks.OnTriggerCallback -= HandleEvent;
        GlobalCallbacks.OnTriggerCallback += HandleEvent;
        RefreshLists();
        await base.OnInitializedAsync();
    }

    void IDisposable.Dispose()
    {
        GlobalCallbacks.OnTriggerCallback -= HandleEvent;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ProductSetsJS = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ProductSets.razor.js");
            await ProductSetsJS.InvokeVoidAsync("SetDotNetRef", DotNetObjectReference.Create(this));
            jsModLoaded = true;
        }

        resetLastSelected();
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        resetLastSelected();
    }

    private void AddProductSet(int listId)
    {
        NavTools.NavigateTo(NavTools.VPageTypes.AddProductSet, "listid=" + listId + "&productset=true");
    }

    private void ViewProductSetItems(int listId)
    {
        NavTools.NavigateTo(NavTools.VPageTypes.ViewProductSet, "listid=" + listId + "&productset=true");
    }

    private void ProductSetItemClicked(int listId)
    {
        ViewProductSetItems(listId);
    }

    private async void resetLastSelected()
    {
        await Task.Delay(300);
        await JS.InvokeAsync<string>("removeLastSelected", null);
    }

    protected override void OnParametersSet()
    {
        GlobalCallbacks.Trigger(GlobalCallbacks.CBKeys.SetTitle, "Manage Product Sets");
        base.OnParametersSet();
    }

    new private void StateHasChanged()
    {
        this.InvokeAsync(() => base.StateHasChanged());
    }

    private async void RefreshLists()
    {
        ProductSetsList = await VLists.GetSetsForUser(await LoginUtils.GetCurrentUserApiKey());
        StateHasChanged();
    }

    private async void DeleteProductSet(ElementReference listCont, int listId, string name)
    {
        await ProductSetsJS.InvokeAsync<string>("FadeListItem", listCont, false);
        var delete = await DialogService.Confirm(
            "Delete set \"" + name + "\"?", "Confirm",
            new ConfirmOptions()
                {
                    CssClass = "confirm_delete_list",
                    OkButtonText = "Yes",
                    CancelButtonText = "No"
                }
        ) ?? false;
        if (delete)
        {
            await Lists.DeleteList(await Lists.GetList(listId, await LoginUtils.GetCurrentUserApiKey()));
            await ProductSetsJS.InvokeAsync<string>("Unfade", listCont);
            RefreshLists();
            return;
        }
        await ProductSetsJS.InvokeAsync<string>("Unfade", listCont);
    }

    private async void OrderProductSet(int listId, int upDn)
    {
        lastSelected = listId;
        var ind = ProductSetsList.FindIndex(l => l.Id == listId);
        if (ind == -1) return;
        if (ind == 0 && upDn == -1) return;
        if (ind == ProductSetsList.Count() - 1 && upDn == 1) return;
        var targ = ProductSetsList[ind];
        var next = ProductSetsList[ind + upDn];
        var oldOrder = targ.Order;
        targ.Order = next.Order;
        next.Order = oldOrder;
        await VLists.SaveLists(new List<VList> { targ, next });
        RefreshLists();
    }

    public async static Task ReorderProductSetItems(List<VList> list)
    {
        var index = 0;
        list.ForEach(item => item.Order = index++);
        await VLists.SaveLists(list);
    }
}